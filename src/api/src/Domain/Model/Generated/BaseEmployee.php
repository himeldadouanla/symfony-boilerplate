<?php
/**
 * This file has been automatically generated by TDBM.
 *
 * DO NOT edit this file, as it might be overwritten.
 * If you need to perform changes, edit the Employee class instead!
 */

declare(strict_types=1);

namespace App\Domain\Model\Generated;

use TheCodingMachine\TDBM\AbstractTDBMObject;
use TheCodingMachine\TDBM\ResultIterator;
use TheCodingMachine\TDBM\AlterableResultIterator;
use Ramsey\Uuid\Uuid;
use JsonSerializable;
use TheCodingMachine\TDBM\Schema\ForeignKeys;
use TheCodingMachine\GraphQLite\Annotations\Field as GraphqlField;

/**
 * The BaseEmployee class maps the 'employees' table in database.
 */
abstract class BaseEmployee extends \TheCodingMachine\TDBM\AbstractTDBMObject implements JsonSerializable
{
    /**
     * @var \TheCodingMachine\TDBM\Schema\ForeignKeys
     */
    private static $foreignKeys = null;

    /**
     * The constructor takes all compulsory arguments.
     *
     * @param string $fullName
     * @param string $phone
     * @param string $email
     */
    public function __construct(string $fullName, string $phone, string $email)
    {
        parent::__construct();
        $this->setFullName($fullName);
        $this->setPhone($phone);
        $this->setEmail($email);
        $this->setId(Uuid::uuid1()->toString());
    }

    /**
     * The getter for the "id" column.
     *
     * @return string
     */
    public function getId() : string
    {
        return $this->get('id', 'employees');
    }

    /**
     * The setter for the "id" column.
     *
     * @param string $id
     */
    public function setId(string $id) : void
    {
        $this->set('id', $id, 'employees');
    }

    /**
     * The getter for the "full_name" column.
     *
     * @return string
     */
    public function getFullName() : string
    {
        return $this->get('full_name', 'employees');
    }

    /**
     * The setter for the "full_name" column.
     *
     * @param string $fullName
     */
    public function setFullName(string $fullName) : void
    {
        $this->set('full_name', $fullName, 'employees');
    }

    /**
     * The getter for the "address" column.
     *
     * @return string|null
     */
    public function getAddress() : ?string
    {
        return $this->get('address', 'employees');
    }

    /**
     * The setter for the "address" column.
     *
     * @param string|null $address
     */
    public function setAddress(?string $address) : void
    {
        $this->set('address', $address, 'employees');
    }

    /**
     * The getter for the "phone" column.
     *
     * @return string
     */
    public function getPhone() : string
    {
        return $this->get('phone', 'employees');
    }

    /**
     * The setter for the "phone" column.
     *
     * @param string $phone
     */
    public function setPhone(string $phone) : void
    {
        $this->set('phone', $phone, 'employees');
    }

    /**
     * The getter for the "email" column.
     *
     * @return string
     */
    public function getEmail() : string
    {
        return $this->get('email', 'employees');
    }

    /**
     * The setter for the "email" column.
     *
     * @param string $email
     */
    public function setEmail(string $email) : void
    {
        $this->set('email', $email, 'employees');
    }

    /**
     * Internal method used to retrieve the list of foreign keys attached to this bean.
     */
    protected static function getForeignKeys(string $tableName) : \TheCodingMachine\TDBM\Schema\ForeignKeys
    {
        if ($tableName === 'employees') {
            if (self::$foreignKeys === null) {
                self::$foreignKeys = new ForeignKeys([

                ]);
            }
            return self::$foreignKeys;
        }
        return parent::getForeignKeys($tableName);
    }

    /**
     * Serializes the object for JSON encoding.
     *
     * @param bool $stopRecursion Parameter used internally by TDBM to stop embedded
     * objects from embedding other objects.
     * @return array
     */
    public function jsonSerialize(bool $stopRecursion = false) : mixed
    {
        $array = [];
        $array['id'] = $this->getId();
        $array['fullName'] = $this->getFullName();
        $array['address'] = $this->getAddress();
        $array['phone'] = $this->getPhone();
        $array['email'] = $this->getEmail();
        return $array;
    }

    /**
     * Returns an array of used tables by this bean (from parent to child
     * relationship).
     *
     * @return string[]
     */
    public function getUsedTables() : array
    {
        return [ 'employees' ];
    }

    public function __clone()
    {
        parent::__clone();
        $this->setId(Uuid::uuid1()->toString());
    }
}
